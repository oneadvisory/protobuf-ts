import type {EnumInfo} from "./reflection-info";

/**
 * Is this a string-based enum object generated by protobuf-ts?
 *
 * The enum object maps each enum value name to itself:
 * { "VALUE1": "VALUE1", "VALUE2": "VALUE2" }
 */
export function isEnumObject(arg: any): arg is EnumInfo[1] {
    if (typeof arg != 'object' || arg === null) {
        return false;
    }
    const keys = Object.keys(arg);
    if (keys.length === 0) {
        return false;
    }
    // All values must be strings that match their keys
    for (let k of keys) {
        if (typeof arg[k] !== 'string' || arg[k] !== k) {
            return false;
        }
    }
    return true;
}

/**
 * Lists all values of an enum, as an array of objects with a "name" property.
 *
 * Throws if the enum does not adhere to the rules of enums generated by
 * protobuf-ts. See `isEnumObject()`.
 */
export function listEnumValues(enumObject: any): EnumObjectValue[] {
    if (!isEnumObject(enumObject))
        throw new Error("not a valid enum object");
    let values: Array<EnumObjectValue> = [];
    for (let name of Object.keys(enumObject)) {
        values.push({ name });
    }
    return values;
}


/**
 * A value of an enum generated by protobuf-ts.
 * Note: 'number' field is deprecated and will always be 0 for string-based enums.
 */
export type EnumObjectValue = { name: string, number?: number };


/**
 * Lists the names of a Typescript enum.
 *
 * Throws if the enum does not adhere to the rules of enums generated by
 * protobuf-ts. See `isEnumObject()`.
 */
export function listEnumNames(enumObject: any): Array<string> {
    return listEnumValues(enumObject).map(val => val.name);
}


/**
 * Lists the numbers of a Typescript enum.
 *
 * @deprecated This function is deprecated for string-based enums. Returns empty array.
 *
 * Throws if the enum does not adhere to the rules of enums generated by
 * protobuf-ts. See `isEnumObject()`.
 */
export function listEnumNumbers(enumObject: any): Array<number> {
    if (!isEnumObject(enumObject))
        throw new Error("not a valid enum object");
    // String-based enums don't have numbers
    return [];
}
