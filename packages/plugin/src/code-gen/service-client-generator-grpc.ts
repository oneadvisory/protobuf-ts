import { ServiceClientGeneratorBase } from './service-client-generator-base';
import { TypescriptFile } from '../framework/typescript-file';
import * as ts from 'typescript';
import * as rpc from '@oneadvisory/protobuf-ts-runtime-rpc';
import { assert } from '@oneadvisory/protobuf-ts-runtime';
import { DescService } from '@bufbuild/protobuf';

export class ServiceClientGeneratorGrpc extends ServiceClientGeneratorBase {
  readonly symbolKindInterface = 'grpc1-client-interface';
  readonly symbolKindImplementation = 'grpc1-client';

  generateImplementationClass(
    source: TypescriptFile,
    descService: DescService
  ): ts.ClassDeclaration {
    const interpreterType = this.interpreter.getServiceType(descService),
      ServiceClient = this.imports.type(
        source,
        descService,
        this.symbolKindImplementation
      ),
      IServiceClient = this.imports.type(
        source,
        descService,
        this.symbolKindInterface
      ),
      BinaryReadOptions = this.imports.name(
        source,
        'BinaryReadOptions',
        this.options.runtimeImportPath,
        true
      ),
      BinaryWriteOptions = this.imports.name(
        source,
        'BinaryWriteOptions',
        this.options.runtimeImportPath,
        true
      ),
      grpc = this.imports.namespace(source, 'grpc', '@grpc/grpc-js');

    const members: ts.ClassElement[] = [
      // private readonly _binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions>;
      ts.factory.createPropertyDeclaration(
        [
          ts.factory.createModifier(ts.SyntaxKind.PrivateKeyword),
          ts.factory.createModifier(ts.SyntaxKind.ReadonlyKeyword),
        ],
        ts.factory.createIdentifier('_binaryOptions'),
        undefined,
        ts.factory.createTypeReferenceNode(
          ts.factory.createIdentifier('Partial'),
          [
            ts.factory.createIntersectionTypeNode([
              ts.factory.createTypeReferenceNode(
                ts.factory.createIdentifier(BinaryReadOptions),
                undefined
              ),
              ts.factory.createTypeReferenceNode(
                ts.factory.createIdentifier(BinaryWriteOptions),
                undefined
              ),
            ]),
          ]
        ),
        undefined
      ),

      //
      ts.factory.createConstructorDeclaration(
        undefined,
        [
          ts.factory.createParameterDeclaration(
            undefined,
            undefined,
            ts.factory.createIdentifier('address'),
            undefined,
            ts.factory.createKeywordTypeNode(ts.SyntaxKind.StringKeyword),
            undefined
          ),
          ts.factory.createParameterDeclaration(
            undefined,
            undefined,
            ts.factory.createIdentifier('credentials'),
            undefined,
            ts.factory.createTypeReferenceNode(
              ts.factory.createQualifiedName(
                ts.factory.createIdentifier(grpc),
                ts.factory.createIdentifier('ChannelCredentials')
              ),
              undefined
            ),
            undefined
          ),
          ts.factory.createParameterDeclaration(
            undefined,
            undefined,
            ts.factory.createIdentifier('options'),
            undefined,
            ts.factory.createTypeReferenceNode(
              ts.factory.createQualifiedName(
                ts.factory.createIdentifier(grpc),
                ts.factory.createIdentifier('ClientOptions')
              ),
              undefined
            ),
            ts.factory.createObjectLiteralExpression([], false)
          ),
          ts.factory.createParameterDeclaration(
            undefined,
            undefined,
            ts.factory.createIdentifier('binaryOptions'),
            undefined,
            ts.factory.createTypeReferenceNode(
              ts.factory.createIdentifier('Partial'),
              [
                ts.factory.createIntersectionTypeNode([
                  ts.factory.createTypeReferenceNode(
                    ts.factory.createIdentifier(BinaryReadOptions),
                    undefined
                  ),
                  ts.factory.createTypeReferenceNode(
                    ts.factory.createIdentifier(BinaryWriteOptions),
                    undefined
                  ),
                ]),
              ]
            ),
            ts.factory.createObjectLiteralExpression([], false)
          ),
        ],
        ts.factory.createBlock(
          [
            ts.factory.createExpressionStatement(
              ts.factory.createCallExpression(
                ts.factory.createSuper(),
                undefined,
                [
                  ts.factory.createIdentifier('address'),
                  ts.factory.createIdentifier('credentials'),
                  ts.factory.createIdentifier('options'),
                ]
              )
            ),
            ts.factory.createExpressionStatement(
              ts.factory.createBinaryExpression(
                ts.factory.createPropertyAccessExpression(
                  ts.factory.createThis(),
                  ts.factory.createIdentifier('_binaryOptions')
                ),
                ts.factory.createToken(ts.SyntaxKind.EqualsToken),
                ts.factory.createIdentifier('binaryOptions')
              )
            ),
          ],
          true
        )
      ),

      ...interpreterType.methods.map((mi) => {
        const declaration = this.createMethod(source, mi);
        const descMethod = descService.methods.find(
          (descMethod) => descMethod.name === mi.name
        );
        assert(descMethod);
        this.comments.addCommentsForDescriptor(
          declaration,
          descMethod,
          'appendToLeadingBlock'
        );
        return declaration;
      }),
    ];

    // export class MyService implements MyService, ServiceInfo
    const statement = ts.factory.createClassDeclaration(
      [ts.factory.createModifier(ts.SyntaxKind.ExportKeyword)],
      ServiceClient,
      undefined,
      [
        ts.factory.createHeritageClause(ts.SyntaxKind.ExtendsKeyword, [
          ts.factory.createExpressionWithTypeArguments(
            ts.factory.createPropertyAccessExpression(
              ts.factory.createIdentifier(grpc),
              ts.factory.createIdentifier('Client')
            ),
            undefined
          ),
        ]),
        ts.factory.createHeritageClause(ts.SyntaxKind.ImplementsKeyword, [
          ts.factory.createExpressionWithTypeArguments(
            ts.factory.createIdentifier(IServiceClient),
            undefined
          ),
        ]),
      ],
      members
    );

    source.addStatement(statement);
    this.comments.addCommentsForDescriptor(
      statement,
      descService,
      'appendToLeadingBlock'
    );
    return statement;
  }

  protected createUnarySignatures(
    source: TypescriptFile,
    methodInfo: rpc.MethodInfo
  ): ts.MethodSignature[] {
    let grpc = this.imports.namespace(source, 'grpc', '@grpc/grpc-js');
    return [
      ts.factory.createMethodSignature(
        undefined,
        ts.factory.createIdentifier(methodInfo.localName),
        undefined,
        undefined,
        [
          ts.factory.createParameterDeclaration(
            undefined,
            undefined,
            ts.factory.createIdentifier('input'),
            undefined,
            this.makeI(source, methodInfo, true),
            undefined
          ),
          ts.factory.createParameterDeclaration(
            undefined,
            undefined,
            ts.factory.createIdentifier('metadata'),
            undefined,
            ts.factory.createTypeReferenceNode(
              ts.factory.createQualifiedName(
                ts.factory.createIdentifier(grpc),
                ts.factory.createIdentifier('Metadata')
              ),
              undefined
            ),
            undefined
          ),
          ts.factory.createParameterDeclaration(
            undefined,
            undefined,
            ts.factory.createIdentifier('options'),
            undefined,
            ts.factory.createTypeReferenceNode(
              ts.factory.createQualifiedName(
                ts.factory.createIdentifier(grpc),
                ts.factory.createIdentifier('CallOptions')
              ),
              undefined
            ),
            undefined
          ),
          ts.factory.createParameterDeclaration(
            undefined,
            undefined,
            ts.factory.createIdentifier('callback'),
            undefined,
            ts.factory.createFunctionTypeNode(
              undefined,
              [
                ts.factory.createParameterDeclaration(
                  undefined,
                  undefined,
                  ts.factory.createIdentifier('err'),
                  undefined,
                  ts.factory.createUnionTypeNode([
                    ts.factory.createTypeReferenceNode(
                      ts.factory.createQualifiedName(
                        ts.factory.createIdentifier(grpc),
                        ts.factory.createIdentifier('ServiceError')
                      ),
                      undefined
                    ),
                    ts.factory.createLiteralTypeNode(ts.factory.createNull()),
                  ]),
                  undefined
                ),
                ts.factory.createParameterDeclaration(
                  undefined,
                  undefined,
                  ts.factory.createIdentifier('value'),
                  ts.factory.createToken(ts.SyntaxKind.QuestionToken),
                  this.makeO(source, methodInfo, true),
                  undefined
                ),
              ],
              ts.factory.createKeywordTypeNode(ts.SyntaxKind.VoidKeyword)
            ),
            undefined
          ),
        ],
        ts.factory.createTypeReferenceNode(
          ts.factory.createQualifiedName(
            ts.factory.createIdentifier(grpc),
            ts.factory.createIdentifier('ClientUnaryCall')
          ),
          undefined
        )
      ),

      ts.factory.createMethodSignature(
        undefined,
        ts.factory.createIdentifier(methodInfo.localName),
        undefined,
        undefined,
        [
          ts.factory.createParameterDeclaration(
            undefined,
            undefined,
            ts.factory.createIdentifier('input'),
            undefined,
            this.makeI(source, methodInfo, true),
            undefined
          ),
          ts.factory.createParameterDeclaration(
            undefined,
            undefined,
            ts.factory.createIdentifier('metadata'),
            undefined,
            ts.factory.createTypeReferenceNode(
              ts.factory.createQualifiedName(
                ts.factory.createIdentifier(grpc),
                ts.factory.createIdentifier('Metadata')
              ),
              undefined
            ),
            undefined
          ),
          ts.factory.createParameterDeclaration(
            undefined,
            undefined,
            ts.factory.createIdentifier('callback'),
            undefined,
            ts.factory.createFunctionTypeNode(
              undefined,
              [
                ts.factory.createParameterDeclaration(
                  undefined,
                  undefined,
                  ts.factory.createIdentifier('err'),
                  undefined,
                  ts.factory.createUnionTypeNode([
                    ts.factory.createTypeReferenceNode(
                      ts.factory.createQualifiedName(
                        ts.factory.createIdentifier(grpc),
                        ts.factory.createIdentifier('ServiceError')
                      ),
                      undefined
                    ),
                    ts.factory.createLiteralTypeNode(ts.factory.createNull()),
                  ]),
                  undefined
                ),
                ts.factory.createParameterDeclaration(
                  undefined,
                  undefined,
                  ts.factory.createIdentifier('value'),
                  ts.factory.createToken(ts.SyntaxKind.QuestionToken),
                  this.makeO(source, methodInfo, true),
                  undefined
                ),
              ],
              ts.factory.createKeywordTypeNode(ts.SyntaxKind.VoidKeyword)
            ),
            undefined
          ),
        ],
        ts.factory.createTypeReferenceNode(
          ts.factory.createQualifiedName(
            ts.factory.createIdentifier(grpc),
            ts.factory.createIdentifier('ClientUnaryCall')
          ),
          undefined
        )
      ),

      ts.factory.createMethodSignature(
        undefined,
        ts.factory.createIdentifier(methodInfo.localName),
        undefined,
        undefined,
        [
          ts.factory.createParameterDeclaration(
            undefined,
            undefined,
            ts.factory.createIdentifier('input'),
            undefined,
            this.makeI(source, methodInfo, true),
            undefined
          ),
          ts.factory.createParameterDeclaration(
            undefined,
            undefined,
            ts.factory.createIdentifier('options'),
            undefined,
            ts.factory.createTypeReferenceNode(
              ts.factory.createQualifiedName(
                ts.factory.createIdentifier(grpc),
                ts.factory.createIdentifier('CallOptions')
              ),
              undefined
            ),
            undefined
          ),
          ts.factory.createParameterDeclaration(
            undefined,
            undefined,
            ts.factory.createIdentifier('callback'),
            undefined,
            ts.factory.createFunctionTypeNode(
              undefined,
              [
                ts.factory.createParameterDeclaration(
                  undefined,
                  undefined,
                  ts.factory.createIdentifier('err'),
                  undefined,
                  ts.factory.createUnionTypeNode([
                    ts.factory.createTypeReferenceNode(
                      ts.factory.createQualifiedName(
                        ts.factory.createIdentifier(grpc),
                        ts.factory.createIdentifier('ServiceError')
                      ),
                      undefined
                    ),
                    ts.factory.createLiteralTypeNode(ts.factory.createNull()),
                  ]),
                  undefined
                ),
                ts.factory.createParameterDeclaration(
                  undefined,
                  undefined,
                  ts.factory.createIdentifier('value'),
                  ts.factory.createToken(ts.SyntaxKind.QuestionToken),
                  this.makeO(source, methodInfo, true),
                  undefined
                ),
              ],
              ts.factory.createKeywordTypeNode(ts.SyntaxKind.VoidKeyword)
            ),
            undefined
          ),
        ],
        ts.factory.createTypeReferenceNode(
          ts.factory.createQualifiedName(
            ts.factory.createIdentifier(grpc),
            ts.factory.createIdentifier('ClientUnaryCall')
          ),
          undefined
        )
      ),

      ts.factory.createMethodSignature(
        undefined,
        ts.factory.createIdentifier(methodInfo.localName),
        undefined,
        undefined,
        [
          ts.factory.createParameterDeclaration(
            undefined,
            undefined,
            ts.factory.createIdentifier('input'),
            undefined,
            this.makeI(source, methodInfo, true),
            undefined
          ),
          ts.factory.createParameterDeclaration(
            undefined,
            undefined,
            ts.factory.createIdentifier('callback'),
            undefined,
            ts.factory.createFunctionTypeNode(
              undefined,
              [
                ts.factory.createParameterDeclaration(
                  undefined,
                  undefined,
                  ts.factory.createIdentifier('err'),
                  undefined,
                  ts.factory.createUnionTypeNode([
                    ts.factory.createTypeReferenceNode(
                      ts.factory.createQualifiedName(
                        ts.factory.createIdentifier(grpc),
                        ts.factory.createIdentifier('ServiceError')
                      ),
                      undefined
                    ),
                    ts.factory.createLiteralTypeNode(ts.factory.createNull()),
                  ]),
                  undefined
                ),
                ts.factory.createParameterDeclaration(
                  undefined,
                  undefined,
                  ts.factory.createIdentifier('value'),
                  ts.factory.createToken(ts.SyntaxKind.QuestionToken),
                  this.makeO(source, methodInfo, true),
                  undefined
                ),
              ],
              ts.factory.createKeywordTypeNode(ts.SyntaxKind.VoidKeyword)
            ),
            undefined
          ),
        ],
        ts.factory.createTypeReferenceNode(
          ts.factory.createQualifiedName(
            ts.factory.createIdentifier(grpc),
            ts.factory.createIdentifier('ClientUnaryCall')
          ),
          undefined
        )
      ),
    ];
  }

  protected createServerStreamingSignatures(
    source: TypescriptFile,
    methodInfo: rpc.MethodInfo
  ): ts.MethodSignature[] {
    let grpc = this.imports.namespace(source, 'grpc', '@grpc/grpc-js');
    return [
      ts.factory.createMethodSignature(
        undefined,
        ts.factory.createIdentifier(methodInfo.localName),
        undefined,
        undefined,
        [
          ts.factory.createParameterDeclaration(
            undefined,
            undefined,

            ts.factory.createIdentifier('input'),
            undefined,
            this.makeI(source, methodInfo, true),
            undefined
          ),
          ts.factory.createParameterDeclaration(
            undefined,
            undefined,
            ts.factory.createIdentifier('metadata'),
            ts.factory.createToken(ts.SyntaxKind.QuestionToken),
            ts.factory.createTypeReferenceNode(
              ts.factory.createQualifiedName(
                ts.factory.createIdentifier(grpc),
                ts.factory.createIdentifier('Metadata')
              ),
              undefined
            ),
            undefined
          ),
          ts.factory.createParameterDeclaration(
            undefined,
            undefined,
            ts.factory.createIdentifier('options'),
            ts.factory.createToken(ts.SyntaxKind.QuestionToken),
            ts.factory.createTypeReferenceNode(
              ts.factory.createQualifiedName(
                ts.factory.createIdentifier(grpc),
                ts.factory.createIdentifier('CallOptions')
              ),
              undefined
            ),
            undefined
          ),
        ],
        ts.factory.createTypeReferenceNode(
          ts.factory.createQualifiedName(
            ts.factory.createIdentifier(grpc),
            ts.factory.createIdentifier('ClientReadableStream')
          ),
          [this.makeO(source, methodInfo, true)]
        )
      ),
      ts.factory.createMethodSignature(
        undefined,
        ts.factory.createIdentifier(methodInfo.localName),
        undefined,
        undefined,
        [
          ts.factory.createParameterDeclaration(
            undefined,
            undefined,
            ts.factory.createIdentifier('input'),
            undefined,
            this.makeI(source, methodInfo, true),
            undefined
          ),
          ts.factory.createParameterDeclaration(
            undefined,
            undefined,
            ts.factory.createIdentifier('options'),
            ts.factory.createToken(ts.SyntaxKind.QuestionToken),
            ts.factory.createTypeReferenceNode(
              ts.factory.createQualifiedName(
                ts.factory.createIdentifier(grpc),
                ts.factory.createIdentifier('CallOptions')
              ),
              undefined
            ),
            undefined
          ),
        ],
        ts.factory.createTypeReferenceNode(
          ts.factory.createQualifiedName(
            ts.factory.createIdentifier(grpc),
            ts.factory.createIdentifier('ClientReadableStream')
          ),
          [this.makeO(source, methodInfo, true)]
        )
      ),
    ];
  }

  protected createClientStreamingSignatures(
    source: TypescriptFile,
    methodInfo: rpc.MethodInfo
  ): ts.MethodSignature[] {
    let grpc = this.imports.namespace(source, 'grpc', '@grpc/grpc-js');
    return [
      ts.factory.createMethodSignature(
        undefined,
        ts.factory.createIdentifier(methodInfo.localName),
        undefined,
        undefined,
        [
          ts.factory.createParameterDeclaration(
            undefined,
            undefined,
            ts.factory.createIdentifier('metadata'),
            undefined,
            ts.factory.createTypeReferenceNode(
              ts.factory.createQualifiedName(
                ts.factory.createIdentifier(grpc),
                ts.factory.createIdentifier('Metadata')
              ),
              undefined
            ),
            undefined
          ),
          ts.factory.createParameterDeclaration(
            undefined,
            undefined,
            ts.factory.createIdentifier('options'),
            undefined,
            ts.factory.createTypeReferenceNode(
              ts.factory.createQualifiedName(
                ts.factory.createIdentifier(grpc),
                ts.factory.createIdentifier('CallOptions')
              ),
              undefined
            ),
            undefined
          ),
          ts.factory.createParameterDeclaration(
            undefined,
            undefined,
            ts.factory.createIdentifier('callback'),
            undefined,
            ts.factory.createFunctionTypeNode(
              undefined,
              [
                ts.factory.createParameterDeclaration(
                  undefined,
                  undefined,
                  ts.factory.createIdentifier('err'),
                  undefined,
                  ts.factory.createUnionTypeNode([
                    ts.factory.createTypeReferenceNode(
                      ts.factory.createQualifiedName(
                        ts.factory.createIdentifier(grpc),
                        ts.factory.createIdentifier('ServiceError')
                      ),
                      undefined
                    ),
                    ts.factory.createLiteralTypeNode(ts.factory.createNull()),
                  ]),
                  undefined
                ),
                ts.factory.createParameterDeclaration(
                  undefined,
                  undefined,
                  ts.factory.createIdentifier('value'),
                  ts.factory.createToken(ts.SyntaxKind.QuestionToken),
                  this.makeO(source, methodInfo, true),
                  undefined
                ),
              ],
              ts.factory.createKeywordTypeNode(ts.SyntaxKind.VoidKeyword)
            ),
            undefined
          ),
        ],
        ts.factory.createTypeReferenceNode(
          ts.factory.createQualifiedName(
            ts.factory.createIdentifier(grpc),
            ts.factory.createIdentifier('ClientWritableStream')
          ),
          [this.makeI(source, methodInfo, true)]
        )
      ),
      ts.factory.createMethodSignature(
        undefined,

        ts.factory.createIdentifier(methodInfo.localName),
        undefined,
        undefined,
        [
          ts.factory.createParameterDeclaration(
            undefined,
            undefined,
            ts.factory.createIdentifier('metadata'),
            undefined,
            ts.factory.createTypeReferenceNode(
              ts.factory.createQualifiedName(
                ts.factory.createIdentifier(grpc),
                ts.factory.createIdentifier('Metadata')
              ),
              undefined
            ),
            undefined
          ),
          ts.factory.createParameterDeclaration(
            undefined,
            undefined,
            ts.factory.createIdentifier('callback'),
            undefined,
            ts.factory.createFunctionTypeNode(
              undefined,
              [
                ts.factory.createParameterDeclaration(
                  undefined,
                  undefined,
                  ts.factory.createIdentifier('err'),
                  undefined,
                  ts.factory.createUnionTypeNode([
                    ts.factory.createTypeReferenceNode(
                      ts.factory.createQualifiedName(
                        ts.factory.createIdentifier(grpc),
                        ts.factory.createIdentifier('ServiceError')
                      ),
                      undefined
                    ),
                    ts.factory.createLiteralTypeNode(
                      ts.factory.createToken(ts.SyntaxKind.NullKeyword)
                    ),
                  ]),
                  undefined
                ),
                ts.factory.createParameterDeclaration(
                  undefined,
                  undefined,
                  ts.factory.createIdentifier('value'),
                  ts.factory.createToken(ts.SyntaxKind.QuestionToken),
                  this.makeO(source, methodInfo, true),
                  undefined
                ),
              ],
              ts.factory.createKeywordTypeNode(ts.SyntaxKind.VoidKeyword)
            ),
            undefined
          ),
        ],
        ts.factory.createTypeReferenceNode(
          ts.factory.createQualifiedName(
            ts.factory.createIdentifier(grpc),
            ts.factory.createIdentifier('ClientWritableStream')
          ),
          [this.makeI(source, methodInfo, true)]
        )
      ),
      ts.factory.createMethodSignature(
        undefined,
        ts.factory.createIdentifier(methodInfo.localName),
        undefined,
        undefined,
        [
          ts.factory.createParameterDeclaration(
            undefined,
            undefined,
            ts.factory.createIdentifier('options'),
            undefined,
            ts.factory.createTypeReferenceNode(
              ts.factory.createQualifiedName(
                ts.factory.createIdentifier(grpc),
                ts.factory.createIdentifier('CallOptions')
              ),
              undefined
            ),
            undefined
          ),
          ts.factory.createParameterDeclaration(
            undefined,
            undefined,
            ts.factory.createIdentifier('callback'),
            undefined,
            ts.factory.createFunctionTypeNode(
              undefined,
              [
                ts.factory.createParameterDeclaration(
                  undefined,
                  undefined,
                  ts.factory.createIdentifier('err'),
                  undefined,
                  ts.factory.createUnionTypeNode([
                    ts.factory.createTypeReferenceNode(
                      ts.factory.createQualifiedName(
                        ts.factory.createIdentifier(grpc),
                        ts.factory.createIdentifier('ServiceError')
                      ),
                      undefined
                    ),
                    ts.factory.createLiteralTypeNode(
                      ts.factory.createToken(ts.SyntaxKind.NullKeyword)
                    ),
                  ]),
                  undefined
                ),
                ts.factory.createParameterDeclaration(
                  undefined,
                  undefined,
                  ts.factory.createIdentifier('value'),
                  ts.factory.createToken(ts.SyntaxKind.QuestionToken),
                  this.makeO(source, methodInfo, true),
                  undefined
                ),
              ],
              ts.factory.createKeywordTypeNode(ts.SyntaxKind.VoidKeyword)
            ),
            undefined
          ),
        ],
        ts.factory.createTypeReferenceNode(
          ts.factory.createQualifiedName(
            ts.factory.createIdentifier(grpc),
            ts.factory.createIdentifier('ClientWritableStream')
          ),
          [this.makeI(source, methodInfo, true)]
        )
      ),
      ts.factory.createMethodSignature(
        undefined,
        ts.factory.createIdentifier(methodInfo.localName),
        undefined,
        undefined,
        [
          ts.factory.createParameterDeclaration(
            undefined,
            undefined,
            ts.factory.createIdentifier('callback'),
            undefined,
            ts.factory.createFunctionTypeNode(
              undefined,
              [
                ts.factory.createParameterDeclaration(
                  undefined,
                  undefined,
                  ts.factory.createIdentifier('err'),
                  undefined,
                  ts.factory.createUnionTypeNode([
                    ts.factory.createTypeReferenceNode(
                      ts.factory.createQualifiedName(
                        ts.factory.createIdentifier(grpc),
                        ts.factory.createIdentifier('ServiceError')
                      ),
                      undefined
                    ),
                    ts.factory.createLiteralTypeNode(ts.factory.createNull()),
                  ]),
                  undefined
                ),
                ts.factory.createParameterDeclaration(
                  undefined,
                  undefined,
                  ts.factory.createIdentifier('value'),
                  ts.factory.createToken(ts.SyntaxKind.QuestionToken),
                  this.makeO(source, methodInfo, true),
                  undefined
                ),
              ],
              ts.factory.createKeywordTypeNode(ts.SyntaxKind.VoidKeyword)
            ),
            undefined
          ),
        ],
        ts.factory.createTypeReferenceNode(
          ts.factory.createQualifiedName(
            ts.factory.createIdentifier(grpc),
            ts.factory.createIdentifier('ClientWritableStream')
          ),
          [this.makeI(source, methodInfo, true)]
        )
      ),
    ];
  }

  protected createDuplexStreamingSignatures(
    source: TypescriptFile,
    methodInfo: rpc.MethodInfo
  ): ts.MethodSignature[] {
    let grpc = this.imports.namespace(source, 'grpc', '@grpc/grpc-js');
    return [
      ts.factory.createMethodSignature(
        undefined,
        ts.factory.createIdentifier(methodInfo.localName),
        undefined,
        undefined,
        [
          ts.factory.createParameterDeclaration(
            undefined,
            undefined,
            ts.factory.createIdentifier('metadata'),
            undefined,
            ts.factory.createTypeReferenceNode(
              ts.factory.createQualifiedName(
                ts.factory.createIdentifier(grpc),
                ts.factory.createIdentifier('Metadata')
              ),
              undefined
            ),
            undefined
          ),
          ts.factory.createParameterDeclaration(
            undefined,
            undefined,
            ts.factory.createIdentifier('options'),
            ts.factory.createToken(ts.SyntaxKind.QuestionToken),
            ts.factory.createTypeReferenceNode(
              ts.factory.createQualifiedName(
                ts.factory.createIdentifier(grpc),
                ts.factory.createIdentifier('CallOptions')
              ),
              undefined
            ),
            undefined
          ),
        ],
        ts.factory.createTypeReferenceNode(
          ts.factory.createQualifiedName(
            ts.factory.createIdentifier(grpc),
            ts.factory.createIdentifier('ClientDuplexStream')
          ),
          [
            this.makeI(source, methodInfo, true),
            this.makeO(source, methodInfo, true),
          ]
        )
      ),
      ts.factory.createMethodSignature(
        undefined,
        ts.factory.createIdentifier(methodInfo.localName),
        undefined,
        undefined,

        [
          ts.factory.createParameterDeclaration(
            undefined,
            undefined,
            ts.factory.createIdentifier('options'),
            ts.factory.createToken(ts.SyntaxKind.QuestionToken),
            ts.factory.createTypeReferenceNode(
              ts.factory.createQualifiedName(
                ts.factory.createIdentifier(grpc),
                ts.factory.createIdentifier('CallOptions')
              ),
              undefined
            ),
            undefined
          ),
        ],
        ts.factory.createTypeReferenceNode(
          ts.factory.createQualifiedName(
            ts.factory.createIdentifier(grpc),
            ts.factory.createIdentifier('ClientDuplexStream')
          ),
          [
            this.makeI(source, methodInfo, true),
            this.makeO(source, methodInfo, true),
          ]
        )
      ),
    ];
  }

  protected createUnary(
    source: TypescriptFile,
    methodInfo: rpc.MethodInfo
  ): ts.MethodDeclaration {
    const descService = this.registry.getService(methodInfo.service.typeName);
    assert(descService);
    let grpc = this.imports.namespace(source, 'grpc', '@grpc/grpc-js');
    let ServiceType = this.imports.type(source, descService);
    let methodIndex = methodInfo.service.methods.indexOf(methodInfo);
    return ts.factory.createMethodDeclaration(
      undefined,
      undefined,
      ts.factory.createIdentifier(methodInfo.localName),
      undefined,
      undefined,
      [
        ts.factory.createParameterDeclaration(
          undefined,
          undefined,
          ts.factory.createIdentifier('input'),
          undefined,
          this.makeI(source, methodInfo, true),
          undefined
        ),
        ts.factory.createParameterDeclaration(
          undefined,
          undefined,
          ts.factory.createIdentifier('metadata'),
          undefined,
          ts.factory.createUnionTypeNode([
            ts.factory.createTypeReferenceNode(
              ts.factory.createQualifiedName(
                ts.factory.createIdentifier(grpc),
                ts.factory.createIdentifier('Metadata')
              ),
              undefined
            ),
            ts.factory.createTypeReferenceNode(
              ts.factory.createQualifiedName(
                ts.factory.createIdentifier(grpc),
                ts.factory.createIdentifier('CallOptions')
              ),
              undefined
            ),
            ts.factory.createParenthesizedType(
              ts.factory.createFunctionTypeNode(
                undefined,
                [
                  ts.factory.createParameterDeclaration(
                    undefined,
                    undefined,
                    ts.factory.createIdentifier('err'),
                    undefined,
                    ts.factory.createUnionTypeNode([
                      ts.factory.createTypeReferenceNode(
                        ts.factory.createQualifiedName(
                          ts.factory.createIdentifier(grpc),
                          ts.factory.createIdentifier('ServiceError')
                        ),
                        undefined
                      ),
                      ts.factory.createLiteralTypeNode(ts.factory.createNull()),
                    ]),
                    undefined
                  ),
                  ts.factory.createParameterDeclaration(
                    undefined,
                    undefined,
                    ts.factory.createIdentifier('value'),
                    ts.factory.createToken(ts.SyntaxKind.QuestionToken),
                    this.makeO(source, methodInfo, true),
                    undefined
                  ),
                ],
                ts.factory.createKeywordTypeNode(ts.SyntaxKind.VoidKeyword)
              )
            ),
          ]),
          undefined
        ),
        ts.factory.createParameterDeclaration(
          undefined,
          undefined,
          ts.factory.createIdentifier('options'),
          ts.factory.createToken(ts.SyntaxKind.QuestionToken),
          ts.factory.createUnionTypeNode([
            ts.factory.createTypeReferenceNode(
              ts.factory.createQualifiedName(
                ts.factory.createIdentifier(grpc),
                ts.factory.createIdentifier('CallOptions')
              ),
              undefined
            ),
            ts.factory.createParenthesizedType(
              ts.factory.createFunctionTypeNode(
                undefined,
                [
                  ts.factory.createParameterDeclaration(
                    undefined,
                    undefined,
                    ts.factory.createIdentifier('err'),
                    undefined,
                    ts.factory.createUnionTypeNode([
                      ts.factory.createTypeReferenceNode(
                        ts.factory.createQualifiedName(
                          ts.factory.createIdentifier(grpc),
                          ts.factory.createIdentifier('ServiceError')
                        ),
                        undefined
                      ),
                      ts.factory.createLiteralTypeNode(ts.factory.createNull()),
                    ]),
                    undefined
                  ),
                  ts.factory.createParameterDeclaration(
                    undefined,
                    undefined,
                    ts.factory.createIdentifier('value'),
                    ts.factory.createToken(ts.SyntaxKind.QuestionToken),
                    this.makeO(source, methodInfo, true),
                    undefined
                  ),
                ],
                ts.factory.createKeywordTypeNode(ts.SyntaxKind.VoidKeyword)
              )
            ),
          ]),
          undefined
        ),
        ts.factory.createParameterDeclaration(
          undefined,
          undefined,
          ts.factory.createIdentifier('callback'),
          ts.factory.createToken(ts.SyntaxKind.QuestionToken),
          ts.factory.createParenthesizedType(
            ts.factory.createFunctionTypeNode(
              undefined,
              [
                ts.factory.createParameterDeclaration(
                  undefined,
                  undefined,
                  ts.factory.createIdentifier('err'),
                  undefined,
                  ts.factory.createUnionTypeNode([
                    ts.factory.createTypeReferenceNode(
                      ts.factory.createQualifiedName(
                        ts.factory.createIdentifier(grpc),
                        ts.factory.createIdentifier('ServiceError')
                      ),
                      undefined
                    ),
                    ts.factory.createLiteralTypeNode(
                      ts.factory.createToken(ts.SyntaxKind.NullKeyword)
                    ),
                  ]),
                  undefined
                ),
                ts.factory.createParameterDeclaration(
                  undefined,
                  undefined,
                  ts.factory.createIdentifier('value'),
                  ts.factory.createToken(ts.SyntaxKind.QuestionToken),
                  this.makeO(source, methodInfo, true),
                  undefined
                ),
              ],
              ts.factory.createKeywordTypeNode(ts.SyntaxKind.VoidKeyword)
            )
          ),
          undefined
        ),
      ],
      ts.factory.createTypeReferenceNode(
        ts.factory.createQualifiedName(
          ts.factory.createIdentifier(grpc),
          ts.factory.createIdentifier('ClientUnaryCall')
        ),
        undefined
      ),
      ts.factory.createBlock(
        [
          ts.factory.createVariableStatement(
            undefined,
            ts.factory.createVariableDeclarationList(
              [
                ts.factory.createVariableDeclaration(
                  ts.factory.createIdentifier('method'),
                  undefined,
                  undefined,
                  ts.factory.createElementAccessExpression(
                    ts.factory.createPropertyAccessExpression(
                      ts.factory.createIdentifier(ServiceType),
                      ts.factory.createIdentifier('methods')
                    ),
                    ts.factory.createNumericLiteral(methodIndex.toString())
                  )
                ),
              ],
              ts.NodeFlags.Const
            )
          ),
          ts.factory.createReturnStatement(
            ts.factory.createCallExpression(
              ts.factory.createPropertyAccessExpression(
                ts.factory.createThis(),
                ts.factory.createIdentifier('makeUnaryRequest')
              ),
              [
                this.makeI(source, methodInfo, true),
                this.makeO(source, methodInfo, true),
              ],
              [
                ts.factory.createTemplateExpression(
                  ts.factory.createTemplateHead('/', '/'),
                  [
                    ts.factory.createTemplateSpan(
                      ts.factory.createPropertyAccessExpression(
                        ts.factory.createIdentifier(ServiceType),
                        ts.factory.createIdentifier('typeName')
                      ),
                      ts.factory.createTemplateMiddle('/', '/')
                    ),
                    ts.factory.createTemplateSpan(
                      ts.factory.createPropertyAccessExpression(
                        ts.factory.createIdentifier('method'),
                        ts.factory.createIdentifier('name')
                      ),
                      ts.factory.createTemplateTail('', '')
                    ),
                  ]
                ),
                ts.factory.createArrowFunction(
                  undefined,
                  undefined,
                  [
                    ts.factory.createParameterDeclaration(
                      undefined,
                      undefined,

                      ts.factory.createIdentifier('value'),
                      undefined,
                      this.makeI(source, methodInfo, true),
                      undefined
                    ),
                  ],
                  ts.factory.createTypeReferenceNode(
                    ts.factory.createIdentifier('Buffer'),
                    undefined
                  ),
                  ts.factory.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
                  ts.factory.createCallExpression(
                    ts.factory.createPropertyAccessExpression(
                      ts.factory.createIdentifier('Buffer'),
                      ts.factory.createIdentifier('from')
                    ),
                    undefined,
                    [
                      ts.factory.createCallExpression(
                        ts.factory.createPropertyAccessExpression(
                          ts.factory.createPropertyAccessExpression(
                            ts.factory.createIdentifier('method'),
                            ts.factory.createIdentifier('I')
                          ),
                          ts.factory.createIdentifier('toBinary')
                        ),
                        undefined,
                        [
                          ts.factory.createIdentifier('value'),
                          ts.factory.createPropertyAccessExpression(
                            ts.factory.createThis(),
                            ts.factory.createIdentifier('_binaryOptions')
                          ),
                        ]
                      ),
                    ]
                  )
                ),
                ts.factory.createArrowFunction(
                  undefined,
                  undefined,
                  [
                    ts.factory.createParameterDeclaration(
                      undefined,
                      undefined,
                      ts.factory.createIdentifier('value'),
                      undefined,
                      ts.factory.createTypeReferenceNode(
                        ts.factory.createIdentifier('Buffer'),
                        undefined
                      ),
                      undefined
                    ),
                  ],
                  this.makeO(source, methodInfo, true),
                  ts.factory.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
                  ts.factory.createCallExpression(
                    ts.factory.createPropertyAccessExpression(
                      ts.factory.createPropertyAccessExpression(
                        ts.factory.createIdentifier('method'),
                        ts.factory.createIdentifier('O')
                      ),
                      ts.factory.createIdentifier('fromBinary')
                    ),
                    undefined,
                    [
                      ts.factory.createIdentifier('value'),
                      ts.factory.createPropertyAccessExpression(
                        ts.factory.createThis(),
                        ts.factory.createIdentifier('_binaryOptions')
                      ),
                    ]
                  )
                ),
                ts.factory.createIdentifier('input'),
                ts.factory.createAsExpression(
                  ts.factory.createIdentifier('metadata'),
                  ts.factory.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword)
                ),
                ts.factory.createAsExpression(
                  ts.factory.createIdentifier('options'),
                  ts.factory.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword)
                ),
                ts.factory.createAsExpression(
                  ts.factory.createIdentifier('callback'),
                  ts.factory.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword)
                ),
              ]
            )
          ),
        ],
        true
      )
    );
  }

  protected createServerStreaming(
    source: TypescriptFile,
    methodInfo: rpc.MethodInfo
  ): ts.MethodDeclaration {
    const descService = this.registry.getService(methodInfo.service.typeName);
    assert(descService);
    let grpc = this.imports.namespace(source, 'grpc', '@grpc/grpc-js');
    let ServiceType = this.imports.type(source, descService);
    let methodIndex = methodInfo.service.methods.indexOf(methodInfo);
    return ts.factory.createMethodDeclaration(
      undefined,
      undefined,
      ts.factory.createIdentifier(methodInfo.localName),
      undefined,
      undefined,
      [
        ts.factory.createParameterDeclaration(
          undefined,
          undefined,
          ts.factory.createIdentifier('input'),
          undefined,
          this.makeI(source, methodInfo, true),
          undefined
        ),
        ts.factory.createParameterDeclaration(
          undefined,
          undefined,
          ts.factory.createIdentifier('metadata'),
          ts.factory.createToken(ts.SyntaxKind.QuestionToken),
          ts.factory.createUnionTypeNode([
            ts.factory.createTypeReferenceNode(
              ts.factory.createQualifiedName(
                ts.factory.createIdentifier(grpc),
                ts.factory.createIdentifier('Metadata')
              ),
              undefined
            ),
            ts.factory.createTypeReferenceNode(
              ts.factory.createQualifiedName(
                ts.factory.createIdentifier(grpc),
                ts.factory.createIdentifier('CallOptions')
              ),
              undefined
            ),
          ]),
          undefined
        ),
        ts.factory.createParameterDeclaration(
          undefined,
          undefined,
          ts.factory.createIdentifier('options'),
          ts.factory.createToken(ts.SyntaxKind.QuestionToken),
          ts.factory.createTypeReferenceNode(
            ts.factory.createQualifiedName(
              ts.factory.createIdentifier(grpc),
              ts.factory.createIdentifier('CallOptions')
            ),
            undefined
          ),
          undefined
        ),
      ],
      ts.factory.createTypeReferenceNode(
        ts.factory.createQualifiedName(
          ts.factory.createIdentifier(grpc),
          ts.factory.createIdentifier('ClientReadableStream')
        ),
        [this.makeO(source, methodInfo, true)]
      ),
      ts.factory.createBlock(
        [
          ts.factory.createVariableStatement(
            undefined,
            ts.factory.createVariableDeclarationList(
              [
                ts.factory.createVariableDeclaration(
                  ts.factory.createIdentifier('method'),
                  undefined,
                  undefined,
                  ts.factory.createElementAccessExpression(
                    ts.factory.createPropertyAccessExpression(
                      ts.factory.createIdentifier(ServiceType),
                      ts.factory.createIdentifier('methods')
                    ),
                    ts.factory.createNumericLiteral(methodIndex.toString())
                  )
                ),
              ],
              ts.NodeFlags.Const
            )
          ),
          ts.factory.createReturnStatement(
            ts.factory.createCallExpression(
              ts.factory.createPropertyAccessExpression(
                ts.factory.createThis(),
                ts.factory.createIdentifier('makeServerStreamRequest')
              ),
              [
                this.makeI(source, methodInfo, true),
                this.makeO(source, methodInfo, true),
              ],
              [
                ts.factory.createTemplateExpression(
                  ts.factory.createTemplateHead('/', '/'),
                  [
                    ts.factory.createTemplateSpan(
                      ts.factory.createPropertyAccessExpression(
                        ts.factory.createIdentifier(ServiceType),
                        ts.factory.createIdentifier('typeName')
                      ),
                      ts.factory.createTemplateMiddle('/', '/')
                    ),
                    ts.factory.createTemplateSpan(
                      ts.factory.createPropertyAccessExpression(
                        ts.factory.createIdentifier('method'),
                        ts.factory.createIdentifier('name')
                      ),
                      ts.factory.createTemplateTail('', '')
                    ),
                  ]
                ),
                ts.factory.createArrowFunction(
                  undefined,
                  undefined,
                  [
                    ts.factory.createParameterDeclaration(
                      undefined,
                      undefined,
                      ts.factory.createIdentifier('value'),
                      undefined,
                      this.makeI(source, methodInfo, true),
                      undefined
                    ),
                  ],
                  ts.factory.createTypeReferenceNode(
                    ts.factory.createIdentifier('Buffer'),
                    undefined
                  ),
                  ts.factory.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
                  ts.factory.createCallExpression(
                    ts.factory.createPropertyAccessExpression(
                      ts.factory.createIdentifier('Buffer'),
                      ts.factory.createIdentifier('from')
                    ),
                    undefined,
                    [
                      ts.factory.createCallExpression(
                        ts.factory.createPropertyAccessExpression(
                          ts.factory.createPropertyAccessExpression(
                            ts.factory.createIdentifier('method'),
                            ts.factory.createIdentifier('I')
                          ),
                          ts.factory.createIdentifier('toBinary')
                        ),
                        undefined,
                        [
                          ts.factory.createIdentifier('value'),
                          ts.factory.createPropertyAccessExpression(
                            ts.factory.createThis(),
                            ts.factory.createIdentifier('_binaryOptions')
                          ),
                        ]
                      ),
                    ]
                  )
                ),
                ts.factory.createArrowFunction(
                  undefined,
                  undefined,
                  [
                    ts.factory.createParameterDeclaration(
                      undefined,
                      undefined,
                      ts.factory.createIdentifier('value'),
                      undefined,
                      ts.factory.createTypeReferenceNode(
                        ts.factory.createIdentifier('Buffer'),
                        undefined
                      ),
                      undefined
                    ),
                  ],
                  this.makeO(source, methodInfo, true),
                  ts.factory.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
                  ts.factory.createCallExpression(
                    ts.factory.createPropertyAccessExpression(
                      ts.factory.createPropertyAccessExpression(
                        ts.factory.createIdentifier('method'),
                        ts.factory.createIdentifier('O')
                      ),
                      ts.factory.createIdentifier('fromBinary')
                    ),
                    undefined,
                    [
                      ts.factory.createIdentifier('value'),
                      ts.factory.createPropertyAccessExpression(
                        ts.factory.createThis(),
                        ts.factory.createIdentifier('_binaryOptions')
                      ),
                    ]
                  )
                ),
                ts.factory.createIdentifier('input'),
                ts.factory.createAsExpression(
                  ts.factory.createIdentifier('metadata'),
                  ts.factory.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword)
                ),
                ts.factory.createIdentifier('options'),
              ]
            )
          ),
        ],
        true
      )
    );
  }

  protected createClientStreaming(
    source: TypescriptFile,
    methodInfo: rpc.MethodInfo
  ): ts.MethodDeclaration {
    const descService = this.registry.getService(methodInfo.service.typeName);
    assert(descService);
    let grpc = this.imports.namespace(source, 'grpc', '@grpc/grpc-js');
    let ServiceType = this.imports.type(source, descService);
    let methodIndex = methodInfo.service.methods.indexOf(methodInfo);
    return ts.factory.createMethodDeclaration(
      undefined,
      undefined,
      ts.factory.createIdentifier(methodInfo.localName),
      undefined,
      undefined,
      [
        ts.factory.createParameterDeclaration(
          undefined,
          undefined,
          ts.factory.createIdentifier('metadata'),
          undefined,
          ts.factory.createUnionTypeNode([
            ts.factory.createTypeReferenceNode(
              ts.factory.createQualifiedName(
                ts.factory.createIdentifier(grpc),
                ts.factory.createIdentifier('Metadata')
              ),
              undefined
            ),
            ts.factory.createTypeReferenceNode(
              ts.factory.createQualifiedName(
                ts.factory.createIdentifier(grpc),
                ts.factory.createIdentifier('CallOptions')
              ),
              undefined
            ),
            ts.factory.createParenthesizedType(
              ts.factory.createFunctionTypeNode(
                undefined,
                [
                  ts.factory.createParameterDeclaration(
                    undefined,
                    undefined,
                    ts.factory.createIdentifier('err'),
                    undefined,
                    ts.factory.createUnionTypeNode([
                      ts.factory.createTypeReferenceNode(
                        ts.factory.createQualifiedName(
                          ts.factory.createIdentifier(grpc),
                          ts.factory.createIdentifier('ServiceError')
                        ),
                        undefined
                      ),
                      ts.factory.createLiteralTypeNode(ts.factory.createNull()),
                    ]),
                    undefined
                  ),
                  ts.factory.createParameterDeclaration(
                    undefined,
                    undefined,
                    ts.factory.createIdentifier('value'),
                    ts.factory.createToken(ts.SyntaxKind.QuestionToken),
                    this.makeO(source, methodInfo, true),
                    undefined
                  ),
                ],
                ts.factory.createKeywordTypeNode(ts.SyntaxKind.VoidKeyword)
              )
            ),
          ]),
          undefined
        ),
        ts.factory.createParameterDeclaration(
          undefined,
          undefined,
          ts.factory.createIdentifier('options'),
          ts.factory.createToken(ts.SyntaxKind.QuestionToken),
          ts.factory.createUnionTypeNode([
            ts.factory.createTypeReferenceNode(
              ts.factory.createQualifiedName(
                ts.factory.createIdentifier(grpc),
                ts.factory.createIdentifier('CallOptions')
              ),
              undefined
            ),
            ts.factory.createParenthesizedType(
              ts.factory.createFunctionTypeNode(
                undefined,
                [
                  ts.factory.createParameterDeclaration(
                    undefined,
                    undefined,
                    ts.factory.createIdentifier('err'),
                    undefined,
                    ts.factory.createUnionTypeNode([
                      ts.factory.createTypeReferenceNode(
                        ts.factory.createQualifiedName(
                          ts.factory.createIdentifier(grpc),
                          ts.factory.createIdentifier('ServiceError')
                        ),
                        undefined
                      ),
                      ts.factory.createLiteralTypeNode(
                        ts.factory.createToken(ts.SyntaxKind.NullKeyword)
                      ),
                    ]),
                    undefined
                  ),
                  ts.factory.createParameterDeclaration(
                    undefined,
                    undefined,
                    ts.factory.createIdentifier('value'),
                    ts.factory.createToken(ts.SyntaxKind.QuestionToken),
                    this.makeO(source, methodInfo, true),
                    undefined
                  ),
                ],
                ts.factory.createKeywordTypeNode(ts.SyntaxKind.VoidKeyword)
              )
            ),
          ]),
          undefined
        ),
        ts.factory.createParameterDeclaration(
          undefined,
          undefined,
          ts.factory.createIdentifier('callback'),
          ts.factory.createToken(ts.SyntaxKind.QuestionToken),
          ts.factory.createParenthesizedType(
            ts.factory.createFunctionTypeNode(
              undefined,
              [
                ts.factory.createParameterDeclaration(
                  undefined,
                  undefined,
                  ts.factory.createIdentifier('err'),
                  undefined,
                  ts.factory.createUnionTypeNode([
                    ts.factory.createTypeReferenceNode(
                      ts.factory.createQualifiedName(
                        ts.factory.createIdentifier(grpc),
                        ts.factory.createIdentifier('ServiceError')
                      ),
                      undefined
                    ),
                    ts.factory.createLiteralTypeNode(
                      ts.factory.createToken(ts.SyntaxKind.NullKeyword)
                    ),
                  ]),
                  undefined
                ),
                ts.factory.createParameterDeclaration(
                  undefined,
                  undefined,
                  ts.factory.createIdentifier('value'),
                  ts.factory.createToken(ts.SyntaxKind.QuestionToken),
                  this.makeO(source, methodInfo, true),
                  undefined
                ),
              ],
              ts.factory.createKeywordTypeNode(ts.SyntaxKind.VoidKeyword)
            )
          ),
          undefined
        ),
      ],
      ts.factory.createTypeReferenceNode(
        ts.factory.createQualifiedName(
          ts.factory.createIdentifier(grpc),
          ts.factory.createIdentifier('ClientWritableStream')
        ),
        [this.makeI(source, methodInfo, true)]
      ),
      ts.factory.createBlock(
        [
          ts.factory.createVariableStatement(
            undefined,
            ts.factory.createVariableDeclarationList(
              [
                ts.factory.createVariableDeclaration(
                  ts.factory.createIdentifier('method'),
                  undefined,
                  undefined,
                  ts.factory.createElementAccessExpression(
                    ts.factory.createPropertyAccessExpression(
                      ts.factory.createIdentifier(ServiceType),
                      ts.factory.createIdentifier('methods')
                    ),
                    ts.factory.createNumericLiteral(methodIndex.toString())
                  )
                ),
              ],
              ts.NodeFlags.Const
            )
          ),
          ts.factory.createReturnStatement(
            ts.factory.createCallExpression(
              ts.factory.createPropertyAccessExpression(
                ts.factory.createThis(),
                ts.factory.createIdentifier('makeClientStreamRequest')
              ),
              [
                this.makeI(source, methodInfo, true),
                this.makeO(source, methodInfo, true),
              ],
              [
                ts.factory.createTemplateExpression(
                  ts.factory.createTemplateHead('/', '/'),
                  [
                    ts.factory.createTemplateSpan(
                      ts.factory.createPropertyAccessExpression(
                        ts.factory.createIdentifier(ServiceType),
                        ts.factory.createIdentifier('typeName')
                      ),
                      ts.factory.createTemplateMiddle('/', '/')
                    ),
                    ts.factory.createTemplateSpan(
                      ts.factory.createPropertyAccessExpression(
                        ts.factory.createIdentifier('method'),
                        ts.factory.createIdentifier('name')
                      ),
                      ts.factory.createTemplateTail('', '')
                    ),
                  ]
                ),
                ts.factory.createArrowFunction(
                  undefined,
                  undefined,
                  [
                    ts.factory.createParameterDeclaration(
                      undefined,
                      undefined,
                      ts.factory.createIdentifier('value'),
                      undefined,
                      this.makeI(source, methodInfo, true),
                      undefined
                    ),
                  ],
                  ts.factory.createTypeReferenceNode(
                    ts.factory.createIdentifier('Buffer'),
                    undefined
                  ),
                  ts.factory.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
                  ts.factory.createCallExpression(
                    ts.factory.createPropertyAccessExpression(
                      ts.factory.createIdentifier('Buffer'),
                      ts.factory.createIdentifier('from')
                    ),
                    undefined,
                    [
                      ts.factory.createCallExpression(
                        ts.factory.createPropertyAccessExpression(
                          ts.factory.createPropertyAccessExpression(
                            ts.factory.createIdentifier('method'),
                            ts.factory.createIdentifier('I')
                          ),
                          ts.factory.createIdentifier('toBinary')
                        ),
                        undefined,
                        [
                          ts.factory.createIdentifier('value'),
                          ts.factory.createPropertyAccessExpression(
                            ts.factory.createThis(),
                            ts.factory.createIdentifier('_binaryOptions')
                          ),
                        ]
                      ),
                    ]
                  )
                ),
                ts.factory.createArrowFunction(
                  undefined,
                  undefined,
                  [
                    ts.factory.createParameterDeclaration(
                      undefined,
                      undefined,

                      ts.factory.createIdentifier('value'),
                      undefined,
                      ts.factory.createTypeReferenceNode(
                        ts.factory.createIdentifier('Buffer'),
                        undefined
                      ),
                      undefined
                    ),
                  ],
                  this.makeO(source, methodInfo, true),
                  ts.factory.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
                  ts.factory.createCallExpression(
                    ts.factory.createPropertyAccessExpression(
                      ts.factory.createPropertyAccessExpression(
                        ts.factory.createIdentifier('method'),
                        ts.factory.createIdentifier('O')
                      ),
                      ts.factory.createIdentifier('fromBinary')
                    ),
                    undefined,
                    [
                      ts.factory.createIdentifier('value'),
                      ts.factory.createPropertyAccessExpression(
                        ts.factory.createThis(),
                        ts.factory.createIdentifier('_binaryOptions')
                      ),
                    ]
                  )
                ),
                ts.factory.createAsExpression(
                  ts.factory.createIdentifier('metadata'),
                  ts.factory.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword)
                ),
                ts.factory.createAsExpression(
                  ts.factory.createIdentifier('options'),
                  ts.factory.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword)
                ),
                ts.factory.createAsExpression(
                  ts.factory.createIdentifier('callback'),
                  ts.factory.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword)
                ),
              ]
            )
          ),
        ],
        true
      )
    );
  }

  protected createDuplexStreaming(
    source: TypescriptFile,
    methodInfo: rpc.MethodInfo
  ): ts.MethodDeclaration {
    let grpc = this.imports.namespace(source, 'grpc', '@grpc/grpc-js');
    let ServiceType = this.imports.typeByName(
      source,
      methodInfo.service.typeName
    );
    return ts.factory.createMethodDeclaration(
      undefined,
      undefined,
      ts.factory.createIdentifier(methodInfo.localName),
      undefined,
      undefined,
      [
        ts.factory.createParameterDeclaration(
          undefined,
          undefined,
          ts.factory.createIdentifier('metadata'),
          ts.factory.createToken(ts.SyntaxKind.QuestionToken),
          ts.factory.createUnionTypeNode([
            ts.factory.createTypeReferenceNode(
              ts.factory.createQualifiedName(
                ts.factory.createIdentifier(grpc),
                ts.factory.createIdentifier('Metadata')
              ),
              undefined
            ),
            ts.factory.createTypeReferenceNode(
              ts.factory.createQualifiedName(
                ts.factory.createIdentifier(grpc),
                ts.factory.createIdentifier('CallOptions')
              ),
              undefined
            ),
          ]),
          undefined
        ),
        ts.factory.createParameterDeclaration(
          undefined,
          undefined,
          ts.factory.createIdentifier('options'),
          ts.factory.createToken(ts.SyntaxKind.QuestionToken),
          ts.factory.createTypeReferenceNode(
            ts.factory.createQualifiedName(
              ts.factory.createIdentifier(grpc),
              ts.factory.createIdentifier('CallOptions')
            ),
            undefined
          ),
          undefined
        ),
      ],
      ts.factory.createTypeReferenceNode(
        ts.factory.createQualifiedName(
          ts.factory.createIdentifier(grpc),
          ts.factory.createIdentifier('ClientDuplexStream')
        ),
        [
          this.makeI(source, methodInfo, true),
          this.makeO(source, methodInfo, true),
        ]
      ),
      ts.factory.createBlock(
        [
          ts.factory.createVariableStatement(
            undefined,
            ts.factory.createVariableDeclarationList(
              [
                ts.factory.createVariableDeclaration(
                  ts.factory.createIdentifier('method'),
                  undefined,
                  undefined,
                  ts.factory.createElementAccessExpression(
                    ts.factory.createPropertyAccessExpression(
                      ts.factory.createIdentifier(ServiceType),
                      ts.factory.createIdentifier('methods')
                    ),
                    ts.factory.createNumericLiteral(
                      methodInfo.service.methods.indexOf(methodInfo).toString()
                    )
                  )
                ),
              ],
              ts.NodeFlags.Const
            )
          ),
          ts.factory.createReturnStatement(
            ts.factory.createCallExpression(
              ts.factory.createPropertyAccessExpression(
                ts.factory.createThis(),
                ts.factory.createIdentifier('makeBidiStreamRequest')
              ),
              [
                this.makeI(source, methodInfo, true),
                this.makeO(source, methodInfo, true),
              ],
              [
                ts.factory.createTemplateExpression(
                  ts.factory.createTemplateHead('/', '/'),
                  [
                    ts.factory.createTemplateSpan(
                      ts.factory.createPropertyAccessExpression(
                        ts.factory.createIdentifier(ServiceType),
                        ts.factory.createIdentifier('typeName')
                      ),
                      ts.factory.createTemplateMiddle('/', '/')
                    ),
                    ts.factory.createTemplateSpan(
                      ts.factory.createPropertyAccessExpression(
                        ts.factory.createIdentifier('method'),
                        ts.factory.createIdentifier('name')
                      ),
                      ts.factory.createTemplateTail('', '')
                    ),
                  ]
                ),
                ts.factory.createArrowFunction(
                  undefined,
                  undefined,
                  [
                    ts.factory.createParameterDeclaration(
                      undefined,
                      undefined,
                      ts.factory.createIdentifier('value'),
                      undefined,
                      this.makeI(source, methodInfo, true),
                      undefined
                    ),
                  ],
                  ts.factory.createTypeReferenceNode(
                    ts.factory.createIdentifier('Buffer'),
                    undefined
                  ),
                  ts.factory.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
                  ts.factory.createCallExpression(
                    ts.factory.createPropertyAccessExpression(
                      ts.factory.createIdentifier('Buffer'),
                      ts.factory.createIdentifier('from')
                    ),
                    undefined,
                    [
                      ts.factory.createCallExpression(
                        ts.factory.createPropertyAccessExpression(
                          ts.factory.createPropertyAccessExpression(
                            ts.factory.createIdentifier('method'),
                            ts.factory.createIdentifier('I')
                          ),
                          ts.factory.createIdentifier('toBinary')
                        ),
                        undefined,
                        [
                          ts.factory.createIdentifier('value'),
                          ts.factory.createPropertyAccessExpression(
                            ts.factory.createThis(),
                            ts.factory.createIdentifier('_binaryOptions')
                          ),
                        ]
                      ),
                    ]
                  )
                ),
                ts.factory.createArrowFunction(
                  undefined,
                  undefined,
                  [
                    ts.factory.createParameterDeclaration(
                      undefined,
                      undefined,
                      ts.factory.createIdentifier('value'),
                      undefined,
                      ts.factory.createTypeReferenceNode(
                        ts.factory.createIdentifier('Buffer'),
                        undefined
                      ),
                      undefined
                    ),
                  ],
                  this.makeO(source, methodInfo, true),
                  ts.factory.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
                  ts.factory.createCallExpression(
                    ts.factory.createPropertyAccessExpression(
                      ts.factory.createPropertyAccessExpression(
                        ts.factory.createIdentifier('method'),
                        ts.factory.createIdentifier('O')
                      ),
                      ts.factory.createIdentifier('fromBinary')
                    ),
                    undefined,
                    [
                      ts.factory.createIdentifier('value'),
                      ts.factory.createPropertyAccessExpression(
                        ts.factory.createThis(),
                        ts.factory.createIdentifier('_binaryOptions')
                      ),
                    ]
                  )
                ),
                ts.factory.createAsExpression(
                  ts.factory.createIdentifier('metadata'),
                  ts.factory.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword)
                ),
                ts.factory.createIdentifier('options'),
              ]
            )
          ),
        ],
        true
      )
    );
  }
}
