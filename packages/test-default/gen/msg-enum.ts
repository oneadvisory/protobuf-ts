// @generated by protobuf-ts 3.0.0
// @generated from protobuf file "msg-enum.proto" (package "spec", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@oneadvisory/protobuf-ts-runtime";
import type { IBinaryWriter } from "@oneadvisory/protobuf-ts-runtime";
import type { BinaryReadOptions } from "@oneadvisory/protobuf-ts-runtime";
import type { IBinaryReader } from "@oneadvisory/protobuf-ts-runtime";
import { UnknownFieldHandler } from "@oneadvisory/protobuf-ts-runtime";
import { WireType } from "@oneadvisory/protobuf-ts-runtime";
import type { PartialMessage } from "@oneadvisory/protobuf-ts-runtime";
import { reflectionMergePartial } from "@oneadvisory/protobuf-ts-runtime";
import { MessageType } from "@oneadvisory/protobuf-ts-runtime";
/**
 * @generated from protobuf message spec.EnumFieldMessage
 */
export interface EnumFieldMessage {
    /**
     * @generated from protobuf field: spec.SimpleEnum enum_field = 1;
     */
    enumField: SimpleEnum;
    /**
     * @generated from protobuf field: repeated spec.SimpleEnum repeated_enum_field = 2;
     */
    repeatedEnumField?: SimpleEnum[];
    /**
     * @generated from protobuf field: spec.AliasEnum alias_enum_field = 3;
     */
    aliasEnumField: AliasEnum;
    /**
     * @generated from protobuf field: spec.PrefixEnum prefix_enum_field = 4;
     */
    prefixEnumField: PrefixEnum;
}
/**
 * @generated from protobuf enum spec.EnumFieldMessage.TestEnum:
 *
 * enum TestEnum {
 *  ANY = 0;
 *  YES = 1;
 *  NO = 2;
 * }
 */
export type EnumFieldMessage_TestEnum = "ANY" | "YES" | "NO";
export const EnumFieldMessage_TestEnum = {
    /**
     * @generated from protobuf enum value: ANY = 0;
     */ ANY: "ANY",
    /**
     * @generated from protobuf enum value: YES = 1;
     */ YES: "YES",
    /**
     * @generated from protobuf enum value: NO = 2;
     */ NO: "NO"
} as const;
/**
 * @generated from protobuf enum spec.SimpleEnum:
 *
 * enum SimpleEnum {
 *  ANY = 0;  // this is the default value
 *  YES = 1;  // value for positive outcome
 *  NO = 2;  // negative value
 * }
 */
export type SimpleEnum = "ANY" | "YES" | "NO";
export const SimpleEnum = {
    /** this is the default value
     * and this comment has more
     * than one line
     *
     * @generated from protobuf enum value: ANY = 0; */ ANY: "ANY",
    /** value for positive outcome
     *
     * @generated from protobuf enum value: YES = 1; */ YES: "YES",
    /** negative value
     *
     * @generated from protobuf enum value: NO = 2; */ NO: "NO"
} as const;
/**
 * Both B and C have the same numerical value.
 *
 * @generated from protobuf enum spec.AliasEnum:
 *
 * enum AliasEnum {
 *  A = 0;
 *  B = 1;
 *  C = 1;
 * }
 */
export type AliasEnum = "A" | "B" | "C";
export const AliasEnum = {
    /**
     * @generated from protobuf enum value: A = 0;
     */ A: "A",
    /**
     * @generated from protobuf enum value: B = 1;
     */ B: "B",
    /**
     * @generated from protobuf enum value: C = 1;
     */ C: "C"
} as const;
/**
 * The generated enum values should drop the "PREFIX_"
 * part at the top if the target language allows
 * (basically every language except C++).
 *
 * @generated from protobuf enum spec.PrefixEnum:
 *
 * enum PrefixEnum {
 *  PREFIX_ENUM_ANY = 0;
 *  PREFIX_ENUM_YES = 1;
 *  PREFIX_ENUM_NO = 2;
 * }
 */
export type PrefixEnum = "ANY" | "YES" | "NO";
export const PrefixEnum = {
    /**
     * @generated from protobuf enum value: PREFIX_ENUM_ANY = 0;
     */ ANY: "ANY",
    /**
     * @generated from protobuf enum value: PREFIX_ENUM_YES = 1;
     */ YES: "YES",
    /**
     * @generated from protobuf enum value: PREFIX_ENUM_NO = 2;
     */ NO: "NO"
} as const;
// @generated message type with reflection information, may provide speed optimized methods
class EnumFieldMessage$Type extends MessageType<EnumFieldMessage> {
    constructor() {
        super("spec.EnumFieldMessage", [
            { no: 1, name: "enum_field", kind: "enum", T: () => ["spec.SimpleEnum", SimpleEnum] },
            { no: 2, name: "repeated_enum_field", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["spec.SimpleEnum", SimpleEnum] },
            { no: 3, name: "alias_enum_field", kind: "enum", T: () => ["spec.AliasEnum", AliasEnum] },
            { no: 4, name: "prefix_enum_field", kind: "enum", T: () => ["spec.PrefixEnum", PrefixEnum, "PREFIX_ENUM_"] }
        ]);
    }
    create(value?: PartialMessage<EnumFieldMessage>): EnumFieldMessage {
        const message = globalThis.Object.create(this.messagePrototype!);
        message.enumField = 0;
        message.repeatedEnumField = [];
        message.aliasEnumField = 0;
        message.prefixEnumField = 0;
        if (value !== undefined)
            reflectionMergePartial<EnumFieldMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnumFieldMessage): EnumFieldMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* spec.SimpleEnum enum_field */ 1:
                    message.enumField = reader.int32();
                    break;
                case /* repeated spec.SimpleEnum repeated_enum_field */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedEnumField?.push?.(reader.int32());
                    else
                        message.repeatedEnumField?.push?.(reader.int32());
                    break;
                case /* spec.AliasEnum alias_enum_field */ 3:
                    message.aliasEnumField = reader.int32();
                    break;
                case /* spec.PrefixEnum prefix_enum_field */ 4:
                    message.prefixEnumField = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EnumFieldMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* spec.SimpleEnum enum_field = 1; */
        if (message.enumField !== 0)
            writer.tag(1, WireType.Varint).int32(message.enumField);
        /* repeated spec.SimpleEnum repeated_enum_field = 2; */
        if (message.repeatedEnumField?.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.repeatedEnumField.length; i++)
                writer.int32(message.repeatedEnumField[i]);
            writer.join();
        }
        /* spec.AliasEnum alias_enum_field = 3; */
        if (message.aliasEnumField !== 0)
            writer.tag(3, WireType.Varint).int32(message.aliasEnumField);
        /* spec.PrefixEnum prefix_enum_field = 4; */
        if (message.prefixEnumField !== 0)
            writer.tag(4, WireType.Varint).int32(message.prefixEnumField);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spec.EnumFieldMessage
 */
export const EnumFieldMessage = new EnumFieldMessage$Type();
