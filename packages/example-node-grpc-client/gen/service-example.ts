// @generated by protobuf-ts 4.0.0 with parameter client_grpc1,optimize_code_size
// @generated from protobuf file "service-example.proto" (package "spec", syntax proto3)
// tslint:disable
import { ServiceType } from "@oneadvisory/protobuf-ts-runtime-rpc";
import { MessageType } from "@oneadvisory/protobuf-ts-runtime";
/**
 * @generated from protobuf message spec.ExampleRequest
 */
export interface ExampleRequest {
    /**
     * any text
     *
     * @generated from protobuf field: string question = 1;
     */
    question: string;
    /**
     * the server should simulate an error in the requested way
     *
     * @generated from protobuf field: spec.FailRequest please_fail = 2;
     */
    pleaseFail: FailRequest;
    /**
     * the server should delay it's response for this amount of milliseconds
     *
     * @generated from protobuf field: int32 please_delay_response_ms = 3;
     */
    pleaseDelayResponseMs: number;
    /**
     * by default, the server always writes some custom response headers
     *
     * @generated from protobuf field: bool disable_sending_example_response_headers = 4;
     */
    disableSendingExampleResponseHeaders: boolean;
}
/**
 * @generated from protobuf message spec.ExampleResponse
 */
export interface ExampleResponse {
    /**
     * any text
     *
     * @generated from protobuf field: string answer = 1;
     */
    answer: string;
    /**
     * contains the request headers that the server received
     *
     * @generated from protobuf field: map<string, string> your_request_headers = 2;
     */
    yourRequestHeaders: {
        [key: string]: string;
    };
    /**
     * contains the deadline that the server received
     *
     * @generated from protobuf field: string your_deadline = 3;
     */
    yourDeadline: string;
    /**
     * the failure requested
     *
     * @generated from protobuf field: spec.FailRequest your_fail_request = 4;
     */
    yourFailRequest: FailRequest;
}
/**
 * @generated from protobuf enum spec.FailRequest:
 *
 * enum FailRequest {
 *  FAIL_REQUEST_NONE = 0;  // don't fail
 *  MESSAGE_THEN_ERROR_STATUS = 1;  // send an error status trailer after sending a message
 *  ERROR_STATUS_ONLY = 2;  // send an error status, don't send any message
 * }
 */
export type FailRequest = "FAIL_REQUEST_NONE" | "MESSAGE_THEN_ERROR_STATUS" | "ERROR_STATUS_ONLY";
export const FailRequest = {
    /** don't fail
     *
     * @generated from protobuf enum value: FAIL_REQUEST_NONE = 0; */ FAIL_REQUEST_NONE: "FAIL_REQUEST_NONE",
    /** send an error status trailer after sending a message
     *
     * @generated from protobuf enum value: MESSAGE_THEN_ERROR_STATUS = 1; */ MESSAGE_THEN_ERROR_STATUS: "MESSAGE_THEN_ERROR_STATUS",
    /** send an error status, don't send any message
     *
     * @generated from protobuf enum value: ERROR_STATUS_ONLY = 2; */ ERROR_STATUS_ONLY: "ERROR_STATUS_ONLY"
} as const;
export const FailRequest$stringToNumber = {
    FAIL_REQUEST_NONE: 0,
    MESSAGE_THEN_ERROR_STATUS: 1,
    ERROR_STATUS_ONLY: 2
} as const;
export const FailRequest$numberToString = {
    0: "FAIL_REQUEST_NONE",
    1: "MESSAGE_THEN_ERROR_STATUS",
    2: "ERROR_STATUS_ONLY"
} as const;
// @generated message type with reflection information, may provide speed optimized methods
class ExampleRequest$Type extends MessageType<ExampleRequest> {
    constructor() {
        super("spec.ExampleRequest", [
            { no: 1, name: "question", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "please_fail", kind: "enum", T: () => ["spec.FailRequest", FailRequest, undefined, FailRequest$stringToNumber] },
            { no: 3, name: "please_delay_response_ms", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "disable_sending_example_response_headers", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message spec.ExampleRequest
 */
export const ExampleRequest = new ExampleRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExampleResponse$Type extends MessageType<ExampleResponse> {
    constructor() {
        super("spec.ExampleResponse", [
            { no: 1, name: "answer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "your_request_headers", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 3, name: "your_deadline", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "your_fail_request", kind: "enum", T: () => ["spec.FailRequest", FailRequest, undefined, FailRequest$stringToNumber] }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message spec.ExampleResponse
 */
export const ExampleResponse = new ExampleResponse$Type();
/**
 * @generated ServiceType for protobuf service spec.ExampleService
 */
export const ExampleService = new ServiceType("spec.ExampleService", [
    { name: "Unary" as const, options: {} as const, I: ExampleRequest, O: ExampleResponse },
    { name: "ServerStream" as const, serverStreaming: true as const, options: {} as const, I: ExampleRequest, O: ExampleResponse },
    { name: "ClientStream" as const, clientStreaming: true as const, options: {} as const, I: ExampleRequest, O: ExampleResponse },
    { name: "Bidi" as const, serverStreaming: true as const, clientStreaming: true as const, options: {} as const, I: ExampleRequest, O: ExampleResponse }
]);
